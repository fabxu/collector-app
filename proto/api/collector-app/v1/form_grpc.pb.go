// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: collector-app/form.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FormService_CreateFormTable_FullMethodName      = "/senseauto.apcloud.app.collectorapp.v1.FormService/CreateFormTable"
	FormService_DeleteFormTable_FullMethodName      = "/senseauto.apcloud.app.collectorapp.v1.FormService/DeleteFormTable"
	FormService_InsertFormData_FullMethodName       = "/senseauto.apcloud.app.collectorapp.v1.FormService/InsertFormData"
	FormService_InsertFormDataString_FullMethodName = "/senseauto.apcloud.app.collectorapp.v1.FormService/InsertFormDataString"
	FormService_GetFormData_FullMethodName          = "/senseauto.apcloud.app.collectorapp.v1.FormService/GetFormData"
	FormService_GetFormDataString_FullMethodName    = "/senseauto.apcloud.app.collectorapp.v1.FormService/GetFormDataString"
	FormService_DeleteFormData_FullMethodName       = "/senseauto.apcloud.app.collectorapp.v1.FormService/DeleteFormData"
)

// FormServiceClient is the client API for FormService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FormServiceClient interface {
	// 创建新表
	CreateFormTable(ctx context.Context, in *CreateTableRequest, opts ...grpc.CallOption) (*CollectResponse, error)
	// 删除新表
	DeleteFormTable(ctx context.Context, in *DeleteTableRequest, opts ...grpc.CallOption) (*CollectResponse, error)
	// 插入数据
	InsertFormData(ctx context.Context, in *InsertDataRequest, opts ...grpc.CallOption) (*CollectResponse, error)
	InsertFormDataString(ctx context.Context, in *InsertStringDataRequest, opts ...grpc.CallOption) (*CollectResponse, error)
	// 查看数据
	GetFormData(ctx context.Context, in *GetDataRequest, opts ...grpc.CallOption) (*GetDataResponse, error)
	GetFormDataString(ctx context.Context, in *GetDataRequest, opts ...grpc.CallOption) (*GetFormDataResponse, error)
	// 删除数据
	DeleteFormData(ctx context.Context, in *DeleteDataRequest, opts ...grpc.CallOption) (*CollectResponse, error)
}

type formServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFormServiceClient(cc grpc.ClientConnInterface) FormServiceClient {
	return &formServiceClient{cc}
}

func (c *formServiceClient) CreateFormTable(ctx context.Context, in *CreateTableRequest, opts ...grpc.CallOption) (*CollectResponse, error) {
	out := new(CollectResponse)
	err := c.cc.Invoke(ctx, FormService_CreateFormTable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *formServiceClient) DeleteFormTable(ctx context.Context, in *DeleteTableRequest, opts ...grpc.CallOption) (*CollectResponse, error) {
	out := new(CollectResponse)
	err := c.cc.Invoke(ctx, FormService_DeleteFormTable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *formServiceClient) InsertFormData(ctx context.Context, in *InsertDataRequest, opts ...grpc.CallOption) (*CollectResponse, error) {
	out := new(CollectResponse)
	err := c.cc.Invoke(ctx, FormService_InsertFormData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *formServiceClient) InsertFormDataString(ctx context.Context, in *InsertStringDataRequest, opts ...grpc.CallOption) (*CollectResponse, error) {
	out := new(CollectResponse)
	err := c.cc.Invoke(ctx, FormService_InsertFormDataString_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *formServiceClient) GetFormData(ctx context.Context, in *GetDataRequest, opts ...grpc.CallOption) (*GetDataResponse, error) {
	out := new(GetDataResponse)
	err := c.cc.Invoke(ctx, FormService_GetFormData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *formServiceClient) GetFormDataString(ctx context.Context, in *GetDataRequest, opts ...grpc.CallOption) (*GetFormDataResponse, error) {
	out := new(GetFormDataResponse)
	err := c.cc.Invoke(ctx, FormService_GetFormDataString_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *formServiceClient) DeleteFormData(ctx context.Context, in *DeleteDataRequest, opts ...grpc.CallOption) (*CollectResponse, error) {
	out := new(CollectResponse)
	err := c.cc.Invoke(ctx, FormService_DeleteFormData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FormServiceServer is the server API for FormService service.
// All implementations must embed UnimplementedFormServiceServer
// for forward compatibility
type FormServiceServer interface {
	// 创建新表
	CreateFormTable(context.Context, *CreateTableRequest) (*CollectResponse, error)
	// 删除新表
	DeleteFormTable(context.Context, *DeleteTableRequest) (*CollectResponse, error)
	// 插入数据
	InsertFormData(context.Context, *InsertDataRequest) (*CollectResponse, error)
	InsertFormDataString(context.Context, *InsertStringDataRequest) (*CollectResponse, error)
	// 查看数据
	GetFormData(context.Context, *GetDataRequest) (*GetDataResponse, error)
	GetFormDataString(context.Context, *GetDataRequest) (*GetFormDataResponse, error)
	// 删除数据
	DeleteFormData(context.Context, *DeleteDataRequest) (*CollectResponse, error)
	mustEmbedUnimplementedFormServiceServer()
}

// UnimplementedFormServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFormServiceServer struct {
}

func (UnimplementedFormServiceServer) CreateFormTable(context.Context, *CreateTableRequest) (*CollectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFormTable not implemented")
}
func (UnimplementedFormServiceServer) DeleteFormTable(context.Context, *DeleteTableRequest) (*CollectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFormTable not implemented")
}
func (UnimplementedFormServiceServer) InsertFormData(context.Context, *InsertDataRequest) (*CollectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertFormData not implemented")
}
func (UnimplementedFormServiceServer) InsertFormDataString(context.Context, *InsertStringDataRequest) (*CollectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertFormDataString not implemented")
}
func (UnimplementedFormServiceServer) GetFormData(context.Context, *GetDataRequest) (*GetDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFormData not implemented")
}
func (UnimplementedFormServiceServer) GetFormDataString(context.Context, *GetDataRequest) (*GetFormDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFormDataString not implemented")
}
func (UnimplementedFormServiceServer) DeleteFormData(context.Context, *DeleteDataRequest) (*CollectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFormData not implemented")
}
func (UnimplementedFormServiceServer) mustEmbedUnimplementedFormServiceServer() {}

// UnsafeFormServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FormServiceServer will
// result in compilation errors.
type UnsafeFormServiceServer interface {
	mustEmbedUnimplementedFormServiceServer()
}

func RegisterFormServiceServer(s grpc.ServiceRegistrar, srv FormServiceServer) {
	s.RegisterService(&FormService_ServiceDesc, srv)
}

func _FormService_CreateFormTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FormServiceServer).CreateFormTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FormService_CreateFormTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FormServiceServer).CreateFormTable(ctx, req.(*CreateTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FormService_DeleteFormTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FormServiceServer).DeleteFormTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FormService_DeleteFormTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FormServiceServer).DeleteFormTable(ctx, req.(*DeleteTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FormService_InsertFormData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FormServiceServer).InsertFormData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FormService_InsertFormData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FormServiceServer).InsertFormData(ctx, req.(*InsertDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FormService_InsertFormDataString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertStringDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FormServiceServer).InsertFormDataString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FormService_InsertFormDataString_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FormServiceServer).InsertFormDataString(ctx, req.(*InsertStringDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FormService_GetFormData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FormServiceServer).GetFormData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FormService_GetFormData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FormServiceServer).GetFormData(ctx, req.(*GetDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FormService_GetFormDataString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FormServiceServer).GetFormDataString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FormService_GetFormDataString_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FormServiceServer).GetFormDataString(ctx, req.(*GetDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FormService_DeleteFormData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FormServiceServer).DeleteFormData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FormService_DeleteFormData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FormServiceServer).DeleteFormData(ctx, req.(*DeleteDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FormService_ServiceDesc is the grpc.ServiceDesc for FormService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FormService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "senseauto.apcloud.app.collectorapp.v1.FormService",
	HandlerType: (*FormServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFormTable",
			Handler:    _FormService_CreateFormTable_Handler,
		},
		{
			MethodName: "DeleteFormTable",
			Handler:    _FormService_DeleteFormTable_Handler,
		},
		{
			MethodName: "InsertFormData",
			Handler:    _FormService_InsertFormData_Handler,
		},
		{
			MethodName: "InsertFormDataString",
			Handler:    _FormService_InsertFormDataString_Handler,
		},
		{
			MethodName: "GetFormData",
			Handler:    _FormService_GetFormData_Handler,
		},
		{
			MethodName: "GetFormDataString",
			Handler:    _FormService_GetFormDataString_Handler,
		},
		{
			MethodName: "DeleteFormData",
			Handler:    _FormService_DeleteFormData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "collector-app/form.proto",
}
